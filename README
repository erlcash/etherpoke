1. Description
etherpoke is a daemon listening on network interface/s monitoring
a session of specified device/s connected to network.

etherpoke defines two events: SESSION_BEGIN, SESSION_END to which
a hook (system command) can be set. The event hook can be any program
installed in the system.

The events are triggered as following:
SESSION_BEGIN is triggered when the first packet, with Ethernet source
address matching the filter, is captured.
SESSION_END is triggered when the time, since the last captured packet
with Ethernet source address matching the filter, exceeds session_timeout.

etherpoke is a free software licensed under GNU GPL3.

2. Installation
Extract the content of the archive.
Change current directory to extracted directory.
Run ./autogen.sh
Run ./configure
Run make && sudo make install.

I do not recommend using the software, yet. It's still work in progress with
plenty of bugs and design issues (possibly). Automake is not working. If you are
a lazy developer, use:

gcc *.c -o etherpoke -ggdb -Wall -lpcap -lpthread -lconfig

If you are a lazy developer who can't stand using the command, fix it and submit
the changes! I would certainly appreciate it.

3. Configuration
This is an example of configuration file:

common:{
	# Listen on these interfaces
	interfaces = ( "wlan0", "eth0", "eth1", "eth2" );
	
	# How long to wait in seconds before the session expires triggering the event SESSION_END
	# Deprecated, session_timeout is specified separately for each device (filter).
	session_timeout = 1800;
};

filters:{
	# Filter name (use anything relevant)
	b2x2_wifi: {
		mac_addr = "1c:4b:d6:ed:80:60";
		session_begin = "echo 'hello world' >> /tmp/b2x2_wifi.out";
		session_end = "echo 'goodbye world' >> /tmp/b2x2_wifi.out";
		session_timeout = 60; # seconds
	};
	
	my_phone: {
		mac_addr = "20:cf:30:49:4d:30";
		session_begin = "echo 'hello world' >> /tmp/my_phone.out";
		session_end = "echo 'goodbye world' >> /tmp/my_phone.out";
		session_timeout = 25; # seconds
	};
	
	# Other filters...
};

4. Dependencies
- glibc (version **find.out**)
- libpcap (version **find.out**)
- libpthread (version **find.out**)
- libconfig (version **find.out**)

5. Applications
The main initiative behind etherpoke is to carry out tasks automatically when a device
(presumably a mobile one) becomes present in WLAN (Wireless Local Area Network). The mobile
device connected to network can be think of as a user's shadow projected in cyberspace, it
opens new possibilities for applications.

etherpoke IS NOT a user application but rather a utility, a building block if you will,
which ought to be used in conjuction with other tools by system administrator. There is
a preliminary expectation to understand workings of computer networks in order to deploy
etherpoke. If you plan to install etherpoke on your workstation, you probably won't get
results you expect, that is to capture packets of other devices in network. The setup
depends on architecture of your network and control devices involved (switch vs hub).

etherpoke ought to be installed on router/switch/hub.

My future plans involve porting etherpoke on other platforms (namely ARM), a package
for OpenWrt and plugin for LuCi - web based configuration interface for embedded devices.
